import os

import pandas
import plotly.express as px


def summarize(
    results_directory: str, image_filepath: str = "results/Image.csv"
) -> pandas.DataFrame:
    """
    Summarize the results of the cell viability analysis.

    Parameters
    ----------
    results_directory : str
        The path to the directory containing the results CSV files.
    image_filepath : str, optional
        The path to the CSV file containing the image data, generated by the
        CellProfiler pipeline, by default "results/Image.csv".

    Returns
    -------
    pandas.DataFrame
        A summary of the results.
    """
    # Read the CSV files
    image_data = pandas.read_csv(image_filepath)[
        ["Metadata_Well", "Metadata_Field", "Count_Nuclei"]
    ]

    # Process image data
    summary = image_data.groupby("Metadata_Well").agg({"Count_Nuclei": "sum"})

    # Rename Count_Nuclei to TotalCells
    summary = summary.rename(columns={"Count_Nuclei": "TotalCells"})

    # Define the well order
    well_order = [f"{row}{col}" for row in "ABCDEFGHIJKLMNOP" for col in range(1, 25)]

    # Convert Metadata_Well to a categorical type with the specified order
    summary.index = pandas.Categorical(
        summary.index, categories=well_order, ordered=True
    )

    # Sort the summary by Metadata_Well
    summary = summary.sort_index()

    # Save summary
    summary.to_csv(os.path.join(results_directory, "summary.csv"))

    return summary


def _plot_plate_map(
    summary: pandas.DataFrame, column: str, title: str, output_filepath: str
):
    """
    Plot a heatmap of the cell viability analysis.

    Parameters
    ----------
    summary : pandas.DataFrame
        Summary table with the results of the analysis.
    column : str
        Name of the column to plot.
    title : str
        Title of the plot.
    output_filepath : str
        Path to the output file.
    """
    # Split the index into two separate columns
    summary["Row"] = summary.index.str[0]
    summary["Column"] = summary.index.str[1:].astype(int)

    # Pivot the summary table to create a heatmap
    # Create a plate map
    plate_map = summary.pivot(index="Row", columns="Column", values=column)

    # Plot the heatmap of the number of cells
    fig = px.imshow(
        plate_map,
        labels=dict(color=column),
        color_continuous_scale="thermal",
        aspect="equal",
        height=800,
        width=1200,
        text_auto="%d",
        range_color=[0, round(plate_map.max().max(), -2)],
    )

    # Update the layout
    fig.update(
        layout=dict(
            title={"text": f"{title}", "x": 0.5},
            xaxis=dict(
                title=None,
                tickvals=list(range(1, 25)),
                tickangle=0,
                side="top",
            ),
            yaxis=dict(title=None, autorange="reversed"),
            coloraxis_colorbar=dict(
                title=title,
                ticks="outside",
                yanchor="top",
                y=1,
                thicknessmode="pixels",
                thickness=50,
                outlinewidth=1,  # Add border line to colorbar
                outlinecolor="black",  # Set border color
            ),
        ),
        data=[{"customdata": summary.index.values.reshape(plate_map.shape)}],
    )

    # Update the hover template
    fig.update_traces(
        hovertemplate="Well: %{customdata}<br>"
        + f"{title}"
        + ": %{z:.1f}<extra></extra>"
    )

    # Save the heatmap to an HTML file
    fig.write_html(output_filepath)


def run(results_directory: str, image_filepath: str):
    """
    Run the postprocessing analysis on the results of the cell viability
    analysis.

    Parameters
    ----------
    results_directory : str
        The path to the directory containing the results CSV files.
    image_filepath : str, optional
        The path to the CSV file containing the image data, generated by the
        CellProfiler pipeline, by default "results/Image.csv".
    """
    # Summarize the results
    summary = summarize(results_directory, image_filepath)

    # Create the plate_map directory
    os.makedirs(os.path.join(results_directory, "plate_map"), exist_ok=True)

    # Plot plate map with number of cells
    _plot_plate_map(
        summary=summary,
        column="TotalCells",
        title="Number of Cells",
        output_filepath=os.path.join(
            results_directory, "plate_map", "number_of_cells.html"
        ),
    )


if __name__ == "__main__":
    run(results_directory="results", image_filepath="results/Image.csv")
