import os

import pandas
import plotly.express as px


def summarize(
    results_directory: str, image_filepath: str = "results/Image.csv"
) -> pandas.DataFrame:
    """
    Summarize the results of the cell viability analysis.

    Parameters
    ----------
    results_directory : str
        The path to the directory containing the results CSV files.
    image_filepath : str, optional
        The path to the CSV file containing the image data, generated by the
        CellProfiler pipeline, by default "results/Image.csv".

    Returns
    -------
    pandas.DataFrame
        A summary of the results.
    """
    # Read the CSV files
    image_data = pandas.read_csv(image_filepath)[
        ["ImageNumber", "Metadata_Well", "Count_Nuclei"]
    ]
    # Process image data
    summary = (
        image_data.groupby("Metadata_Well").agg({"Count_Nuclei": "sum"}).reset_index()
    )

    # Rename Count_Nuclei to TotalCells
    summary = summary.rename(columns={"Count_Nuclei": "TotalCells"})

    # Define the well order
    well_order = [f"{row}{col}" for row in "ABCDEFGHIJKLMNOP" for col in range(1, 25)]

    # Convert Metadata_Well to a categorical type with the specified order
    summary["Metadata_Well"] = pandas.Categorical(
        summary["Metadata_Well"], categories=well_order, ordered=True
    )

    # Sort the summary by Metadata_Well
    summary = summary.sort_values("Metadata_Well").reset_index(drop=True)

    # Save summary
    summary.to_csv(os.path.join(results_directory, "summary.csv"))

    return summary


def plot_heatmap(summary: pandas.DataFrame, output_filepath: str):
    """
    Plot a heatmap of the cell viability analysis.

    Parameters
    ----------
    summary : pandas.DataFrame
        The summary of the results.
    output_filepath : str
        The path to save the output heatmap.
    """
    # Split the Metadata_Well column into two separate columns
    summary["Metadata_Row"] = summary["Metadata_Well"].str[0]
    summary["Metadata_Column"] = summary["Metadata_Well"].str[1:].astype(int)

    # Pivot the summary table to create a heatmap
    heatmap_data = summary.pivot(
        index="Metadata_Row", columns="Metadata_Column", values="TotalCells"
    )

    # Plot the heatmap of the number of cells
    fig = px.imshow(
        heatmap_data,
        labels=dict(x="Row", y="Column", color="Number of Cells"),
        color_continuous_scale="thermal",
        aspect="equal",
    )

    # Update hover data to include Metadata_Well
    fig.update_traces(
        hovertemplate="Well: %{customdata}<br>Number of Cells: %{z}"
    )
    fig.update(
        data=[
            {"customdata": summary["Metadata_Well"].values.reshape(heatmap_data.shape)}
        ]
    )

    # Save the heatmap to an HTML file
    fig.write_html(output_filepath)


def run(results_directory: str, image_filepath: str = "results/Image.csv"):
    """
    Run the postprocessing analysis on the results of the cell viability
    analysis.

    Parameters
    ----------
    results_directory : str
        The path to the directory containing the results CSV files.
    image_filepath : str, optional
        The path to the CSV file containing the image data, generated by the
        CellProfiler pipeline, by default "results/Image.csv".
    """
    # Summarize the results
    summary = summarize(results_directory, image_filepath)
    summary.to_csv(os.path.join(results_directory, "summary.csv"))

    # Plot plate map with number of cells
    os.makedirs(os.path.join(results_directory, "visualization"), exist_ok=True)
    plot_heatmap(
        summary=summary,
        output_filepath=os.path.join(
            results_directory, "visualization", "number_of_cells.html"
        ),
    )


if __name__ == "__main__":
    run(results_directory="results", image_filepath="results/Image.csv")
